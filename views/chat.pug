doctype html
html(lang="en")
 head
  metha(charset="UTF-8" name="viewport" content = "width=device-with,initial-scale=1.0")
  title SocketPractice
  style.
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        font: 13px Helvetica, Arial;
      }
      form {
        background: #000;
        padding: 3px;
        position: fixed;
        bottom: 0;
        width: 100%;
      }
      form input {
        border: 0;
        padding: 10px;
        width: 90%;
        margin-right: 0.5%;
      }
      form button {
        width: 9%;
        background: rgb(130, 224, 255);
        border: none;
        padding: 10px;
      }
      #messages {
        list-style-type: none;
        margin: 0;
        padding: 0;
      }
      #messages li {
        padding: 5px 10px;
      }
      #messages li:nth-child(odd) {
        background: #eee;
      }
  body
    ul#messages
      for chat in room.chats
        div.chatting
          div.user=chat.user
          div.text=chat.chat
          div.date=chat.date
    form#chat-form(action="/chat")
      input#chat(autocomplete="off")
      button(type='submit') 전송
    
    script(src="/socket.io/socket.io.js")
    script(src="https://code.jquery.com/jquery-1.11.1.js")
    script.
        const socket = io.connect('http://localhost:3000/chat', {
          path: '/socket.io'
        });

        // socket.js에서 송신한 join을 처리합니다.
        socket.on('join', (data)=>{
          let div = document.createElement('div');
          div.classList.add('system');
          let chat = document.createElement('div');
          chat.textContent = data.chat;
          div.appendChild(chat);
          document.querySelector('#messages').appendChild(div);
        });

        // socket.js에서 송신한 exit을 처리합니다.
        socket.on('exit', (data)=>{
          let div = document.createElement('div');
          div.classList.add('system');
          let chat = document.createElement('div');
          chat.textContent = data.chat;
          div.appendChild(chat);
          document.querySelector('#messages').appendChild(div);
        });

        // routes/index.js에서 송신한 chat을 처리합니다.
        socket.on('chat', (data)=>{
          let div = document.createElement('div');
          
          let name = document.createElement('div');
          name.textContent = data.user;
          div.appendChild(name);
          
          let chat = document.createElement('div');
          chat.textContent = data.chat;
          div.appendChild(chat);

          let date = document.createElement('div');
          date.textContent = data.date;
          div.appendChild(date);

          document.querySelector('#messages').appendChild(div);
        });

        // 전송 버튼을 누르면 수행하는 메서드입니다. 페이지 새로고침을 막고, 채팅 내용이 잘 전송되면 채팅 입력창을 비웁니다.
        document.querySelector('#chat-form').addEventListener('submit',(e)=>{
          e.preventDefault();
          if(e.target.chat.value){
            let xhr = new XMLHttpRequest();
            xhr.onload = ()=>{
              if(xhr.status === 200){
                e.target.chat.value = '';
              } else {
                console.error(xhr.responseText);
              }
            };
            xhr.open('POST', '/room/#{room._id}/chat');
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.send(JSON.stringify({chat : this.chat.value}));
          }
        });